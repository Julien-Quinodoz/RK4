🔁 Partie 1 : Inclusions et struct

#include <stdio.h>      // pour printf
#include <stdlib.h>     // pour calloc, free
#include <ctype.h>      // pour isdigit

📦 Définition de l’arbre syntaxique

typedef struct node {
    enum {
        ADD,    // addition
        MULTI,  // multiplication
        VAL     // valeur (chiffre)
    } type;

    int val;           // utilisé seulement si type == VAL
    struct node *l;    // sous-arbre gauche
    struct node *r;    // sous-arbre droit
} node;

🧠 Ce struct est utilisé pour représenter un nœud d’arbre d'expression mathématique :

Chaque opérateur + ou * crée un nœud interne avec deux branches (gauche et droite).

Chaque chiffre est une feuille (VAL) avec une valeur.

⚙️ Fonctions utilitaires
🔨 new_node


node *new_node(node n)
{
    node *ret = calloc(1, sizeof(n)); // alloue un nouveau noeud initialisé à 0
    if (!ret)
        return (NULL);
    *ret = n; // copie les champs de `n`
    return (ret);
}
🧠 Crée proprement un nouveau node à partir d’un modèle.

🧹 destroy_tree


void destroy_tree(node *n)
{
    if (!n) return;
    if (n->type != VAL) // si ce n’est pas une feuille, libère les branches
    {
        destroy_tree(n->l);
        destroy_tree(n->r);
    }
    free(n); // libère le nœud lui-même
}
🧠 Libère récursivement tout l’arbre en mémoire.

❗ unexpected


void unexpected(char c)
{
    if (c)
        printf("Unexpected token '%c'\n", c);
    else
        printf("Unexpected end of file\n");
}
🧠 Affiche un message d’erreur clair si un caractère inattendu ou une fin de chaîne est atteinte.

✅ accept et expect


int accept(char **s, char c)
{
    if (**s == c)
    {
        (*s)++;
        return 1;
    }
    return 0;
}
🧠 accept teste si le prochain caractère est c. Si oui, avance le pointeur.



int expect(char **s, char c)
{
    if (accept(s, c))
        return 1;
    unexpected(**s);
    return 0;
}
🧠 expect est comme accept, mais affiche une erreur si le caractère attendu n’est pas là.

🧠 Évaluation de l’arbre


int eval_tree(node *tree)
{
    switch (tree->type)
    {
        case ADD:
            return eval_tree(tree->l) + eval_tree(tree->r);
        case MULTI:
            return eval_tree(tree->l) * eval_tree(tree->r);
        case VAL:
            return tree->val;
    }
}


🧠 Évalue récursivement l’expression :

addition → additionne les sous-arbres

multiplication → multiplie les sous-arbres

valeur → retourne la valeur



🧮 Fonctions de parsing (analyse syntaxique)
parse_factor


node *parse_factor(char **s)
{
    if (isdigit(**s)) // chiffre
    {
        node n = { VAL, **s - '0', NULL, NULL };
        (*s)++;
        return new_node(n);
    }
    if (accept(s, '(')) // parenthèse ouvrante
    {
        node *n = parse_expr(s); // sous-expression
        if (!expect(s, ')'))     // parenthèse fermante attendue
        {
            destroy_tree(n);
            return NULL;
        }
        return n;
    }
    unexpected(**s); // autre caractère invalide
    return NULL;
}
🧠 Gère les chiffres simples ou parenthèses, donc les éléments de base de l’expression.

parse_term


node *parse_term(char **s)
{
    node *left = parse_factor(s); // commence par un facteur
    if (!left) return NULL;

    while (accept(s, '*')) // tant qu’on trouve des multiplications
    {
        node *right = parse_factor(s);
        if (!right)
        {
            destroy_tree(left);
            return NULL;
        }
        node n = { MULTI, 0, left, right }; // crée un nœud MULTI
        left = new_node(n); // devient le nouveau point d’ancrage
        if (!left)
        {
            destroy_tree(right);
            return NULL;
        }
    }
    return left;
}
🧠 Gère les multiplications a*b*c, priorité avant +.

parse_expr


node *parse_expr(char **s)
{
    node *left = parse_term(s);
    if (!left) return NULL;

    while (accept(s, '+')) // tant qu’on trouve des additions
    {
        node *right = parse_term(s);
        if (!right)
        {
            destroy_tree(left);
            return NULL;
        }
        node n = { ADD, 0, left, right }; // crée un nœud ADD
        left = new_node(n);
        if (!left)
        {
            destroy_tree(right);
            return NULL;
        }
    }
    return left;
}
🧠 Gère les additions, priorité la plus faible.

🎬 main


int main(int argc, char **argv)
{
    if (argc != 2) return 1;

    char *s = argv[1];
    node *tree = parse_expr(&s);
    if (!tree) return 1;

    if (*s) // si reste de l’expression non analysé
    {
        unexpected(*s);
        destroy_tree(tree);
        return 1;
    }

    printf("%d\n", eval_tree(tree)); // affiche le résultat
    destroy_tree(tree);              // nettoyage
}



🧠 Fonction principale :

Vérifie qu’un argument est donné

Parse l’expression

Si parsing OK, évalue l’arbre et affiche

Sinon, affiche une erreur

Libère la mémoire

🧪 Exemple complet
Input :
bash
./a.out "2+3*4"

Analyse :
3*4 → d'abord MULTI

puis 2+12 → ADD

Résultat : 14

✅ En résumé
Fonction	Rôle
parse_expr	Gère les +
parse_term	Gère les *
parse_factor	Gère chiffres & parenthèses
eval_tree	Évalue l’arbre
main	Orchestration + sécurité

